import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import Icon from '@/components/ui/icon';

interface BrowserFingerprint {
  user_agent: string;
  screen_resolution: string;
  timezone: string;
  language: string;
  platform: string;
  ip_address: string;
  fingerprint: string;
  telegram_user_id?: string;
  hardwareConcurrency: number;
  deviceMemory?: number;
  maxTouchPoints: number;
  vendor: string;
  webgl_vendor: string;
  webgl_renderer: string;
  webgl_version: string;
  opengl_version: string;
  canvas_fingerprint: string;
}

const Index = () => {
  const [isAgreed, setIsAgreed] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [fingerprint, setFingerprint] = useState<BrowserFingerprint | null>(null);

  const generateCanvasFingerprint = (): string => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (!ctx) return 'no-canvas';
    
    canvas.width = 200;
    canvas.height = 50;
    
    ctx.textBaseline = 'top';
    ctx.font = '14px Arial';
    ctx.fillStyle = '#f60';
    ctx.fillRect(125, 1, 62, 20);
    ctx.fillStyle = '#069';
    ctx.fillText('Naga fingerprint üêâ', 2, 15);
    ctx.fillStyle = 'rgba(102, 204, 0, 0.7)';
    ctx.fillText('Naga fingerprint üêâ', 4, 17);
    
    return canvas.toDataURL();
  };

  const getWebGLInfo = () => {
    const canvas = document.createElement('canvas');
    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    
    if (!gl) {
      return {
        vendor: 'no-webgl',
        renderer: 'no-webgl',
        version: 'no-webgl',
        glsl_version: 'no-webgl'
      };
    }

    const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
    
    return {
      vendor: debugInfo ? gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL) : gl.getParameter(gl.VENDOR),
      renderer: debugInfo ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) : gl.getParameter(gl.RENDERER),
      version: gl.getParameter(gl.VERSION),
      glsl_version: gl.getParameter(gl.SHADING_LANGUAGE_VERSION)
    };
  };

  const collectFingerprint = async (): Promise<BrowserFingerprint> => {
    const webglInfo = getWebGLInfo();
    const canvasFingerprint = generateCanvasFingerprint();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞
    let ipAddress = 'unknown';
    try {
      const response = await fetch('https://api.ipify.org?format=json');
      const data = await response.json();
      ipAddress = data.ip;
    } catch (error) {
      console.error('Failed to get IP:', error);
    }

    // Telegram WebApp ID
    let telegramUserId: string | undefined;
    try {
      // @ts-ignore
      if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
        // @ts-ignore
        telegramUserId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();
      }
    } catch (error) {
      console.error('No Telegram WebApp context:', error);
    }

    const fingerprintData: BrowserFingerprint = {
      user_agent: navigator.userAgent,
      screen_resolution: `${window.screen.width}x${window.screen.height}`,
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      language: navigator.language,
      platform: navigator.platform,
      ip_address: ipAddress,
      fingerprint: btoa(canvasFingerprint + navigator.userAgent + webglInfo.renderer),
      telegram_user_id: telegramUserId,
      hardwareConcurrency: navigator.hardwareConcurrency || 0,
      deviceMemory: (navigator as any).deviceMemory,
      maxTouchPoints: navigator.maxTouchPoints || 0,
      vendor: navigator.vendor,
      webgl_vendor: webglInfo.vendor,
      webgl_renderer: webglInfo.renderer,
      webgl_version: webglInfo.version,
      opengl_version: webglInfo.glsl_version,
      canvas_fingerprint: canvasFingerprint,
    };

    return fingerprintData;
  };

  const handleAccept = async () => {
    if (!isAgreed || isLoading) return;

    setIsLoading(true);
    
    try {
      const fingerprintData = await collectFingerprint();
      setFingerprint(fingerprintData);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ backend
      const response = await fetch('/api/terms/accept', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          accepted: true,
          ...fingerprintData,
        }),
      });

      if (response.ok) {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ WebApp –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        try {
          // @ts-ignore
          if (window.Telegram?.WebApp?.close) {
            // @ts-ignore
            window.Telegram.WebApp.close();
          }
        } catch (error) {
          alert('–°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.');
        }
      } else {
        throw new Error('Failed to send data');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  const agreementText = `
–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï
–û–ë–ú–ï–ù–ù–´–ô –°–ï–†–í–ò–° "NAGA EXCHANGE" üêâ

1. –û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø

1.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–¥–∞–ª–µ–µ - "–°–æ–≥–ª–∞—à–µ–Ω–∏–µ") —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ–±–º–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ "Naga Exchange" (–¥–∞–ª–µ–µ - "–°–µ—Ä–≤–∏—Å") –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –°–µ—Ä–≤–∏—Å–∞.

1.2. Naga Exchange - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ–±–º–µ–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ–¥ —Å–∏–º–≤–æ–ª–æ–º –º–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞-–Ω–∞–≥–∞, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–æ–∫—Ä–æ–≤–∏—â.

1.3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –°–µ—Ä–≤–∏—Å–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏ –±–µ–∑–æ–≥–æ–≤–æ—Ä–æ—á–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.

2. –°–ë–û–† –ò –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•

2.1. –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –°–µ—Ä–≤–∏—Å —Å–æ–±–∏—Ä–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
- IP-–∞–¥—Ä–µ—Å –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –¶–∏—Ñ—Ä–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (fingerprint)
- –í—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –∏ —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

2.2. –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è:
- –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
- –°–æ–±–ª—é–¥–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π AML/KYC
- –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –£–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞

3. –£–°–õ–û–í–ò–Ø –û–ë–ú–ï–ù–ê

3.1. –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –ø–æ –∫—É—Ä—Å–∞–º, –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.

3.2. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –æ–±–º–µ–Ω–∞ —É–∫–∞–∑–∞–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –°–µ—Ä–≤–∏—Å–∞.

3.3. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç 5 –¥–æ 60 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–±–º–µ–Ω–∞.

4. –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨

4.1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–µ—Ç –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.

4.2. –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∑–∞–¥–µ—Ä–∂–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü.

4.3. –í —Å–ª—É—á–∞–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤ –°–µ—Ä–≤–∏—Å –æ–±—è–∑—É–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.

5. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨

5.1. –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏.

5.2. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.

5.3. –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

6. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê

6.1. –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ 24/7 —á–µ—Ä–µ–∑:
- Telegram: @naga_support
- Email: support@nagaexchange.com
- –û–Ω–ª–∞–π–Ω-—á–∞—Ç –Ω–∞ —Å–∞–π—Ç–µ

6.2. –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –Ω–µ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç.

7. –ó–ê–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø

7.1. –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ.

7.2. –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –°–æ–≥–ª–∞—à–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ.

7.3. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å–ø–æ—Ä–æ–≤ —Å—Ç–æ—Ä–æ–Ω—ã —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ –∏—Ö –º–∏—Ä–Ω–æ–º—É —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é.

–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}

üêâ NAGA EXCHANGE - –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç
  `.trim();

  return (
    <div className="min-h-screen bg-gradient-to-br from-naga-dark via-gray-900 to-naga-charcoal text-white">
      {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ–Ω */}
      <div className="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="none" fill-rule="evenodd"%3E%3Cg fill="%23ffffff" fill-opacity="0.03"%3E%3Cpath d="M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] opacity-20"></div>

      <div className="relative z-10 container mx-auto px-4 py-8 max-w-4xl">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –¥—Ä–∞–∫–æ–Ω–∞ */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center mb-4">
            <div className="text-6xl mr-4">üêâ</div>
            <div>
              <h1 className="text-4xl font-bold text-naga-gold mb-2">
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
              </h1>
              <p className="text-naga-teal text-lg">NAGA EXCHANGE</p>
            </div>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
        <Card className="bg-gray-800/90 border-naga-teal/30 backdrop-blur-sm shadow-2xl">
          <div className="p-6">
            {/* –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è */}
            <ScrollArea className="h-[60vh] mb-6 rounded-lg border border-naga-teal/20 bg-gray-900/50 p-6">
              <div className="text-gray-200 leading-relaxed whitespace-pre-line text-sm">
                {agreementText}
              </div>
            </ScrollArea>

            {/* –ß–µ–∫–±–æ–∫—Å —Å–æ–≥–ª–∞—Å–∏—è */}
            <div className="flex items-start space-x-3 mb-6 p-4 rounded-lg bg-naga-teal/10 border border-naga-teal/20">
              <Checkbox
                id="agreement"
                checked={isAgreed}
                onCheckedChange={(checked) => setIsAgreed(checked as boolean)}
                className="data-[state=checked]:bg-naga-teal data-[state=checked]:border-naga-teal mt-1"
              />
              <label
                htmlFor="agreement"
                className="text-gray-200 text-sm leading-relaxed cursor-pointer flex-1"
              >
                –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ 
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) –Ω–∞ —Å–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö 
                –º–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.
              </label>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å */}
            <div className="flex justify-center">
              <Button
                onClick={handleAccept}
                disabled={!isAgreed || isLoading}
                className={`
                  px-8 py-3 text-lg font-semibold rounded-lg transition-all duration-300
                  ${
                    !isAgreed
                      ? 'bg-gray-600 text-gray-400 cursor-not-allowed opacity-50'
                      : 'bg-naga-teal hover:bg-naga-teal/80 text-white hover:shadow-lg hover:scale-105'
                  }
                `}
              >
                {isLoading ? (
                  <div className="flex items-center">
                    <Icon name="Loader2" className="animate-spin mr-2" size={20} />
                    –û–±—Ä–∞–±–æ—Ç–∫–∞...
                  </div>
                ) : (
                  <div className="flex items-center">
                    <Icon name="Check" className="mr-2" size={20} />
                    –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                  </div>
                )}
              </Button>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
            <div className="mt-6 p-4 rounded-lg bg-naga-gold/10 border border-naga-gold/20">
              <div className="flex items-start space-x-3">
                <Icon name="Shield" className="text-naga-gold mt-1" size={20} />
                <div className="text-sm text-gray-300">
                  <p className="font-semibold text-naga-gold mb-1">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö</p>
                  <p>
                    –í—Å–µ —Å–æ–±–∏—Ä–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è 
                    –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π. –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é 
                    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </Card>

        {/* –§—É—Ç–µ—Ä */}
        <div className="text-center mt-8 text-gray-400 text-sm">
          <p>¬© 2024 Naga Exchange. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
          <p className="mt-1">
            <Icon name="Globe" className="inline mr-1" size={14} />
            –ù–∞–¥–µ–∂–Ω—ã–π –æ–±–º–µ–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –¥—Ä–∞–∫–æ–Ω–∞
          </p>
        </div>

        {/* Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) */}
        {fingerprint && process.env.NODE_ENV === 'development' && (
          <Card className="mt-8 bg-gray-800/90 border-red-500/30">
            <div className="p-4">
              <h3 className="text-red-400 font-semibold mb-2">Debug: –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
              <pre className="text-xs text-gray-300 overflow-auto">
                {JSON.stringify(fingerprint, null, 2)}
              </pre>
            </div>
          </Card>
        )}
      </div>
    </div>
  );
};

export default Index;